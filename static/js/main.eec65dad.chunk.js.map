{"version":3,"sources":["searchBox.js","Card.js","Cardlist.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","id","email","href","src","alt","Cardlist","robots","Cardcomponents","map","user","i","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAkBeA,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACA,qBAAKC,UAAW,MAAhB,SACI,uBAAOA,UAAW,mCAClBC,KAAO,SACPC,YAAc,gBACdC,SAAWJ,OCaJK,EAhBF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAKC,EAAW,EAAXA,MAGxB,OACE,oBAAGC,KAAI,+BAA0BF,EAA1B,iBAAP,UACA,sBAAKN,UAAU,uDAAf,UACC,qBAAKS,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,UAE1D,gCACE,6BAAKL,IACL,8BAAIE,EAAJ,aANF,QCkBWI,MArBf,YAA+B,IAAXC,EAAU,EAAVA,OACVC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OAAS,cACL,EADK,CAELV,GAAOM,EAAOI,GAAGV,GACjBD,KAASU,EAAKV,KACdE,MAAUQ,EAAKR,OAHFK,EAAOI,GAAGV,OAO/B,OAAS,wCAKDO,MCXGI,G,MARA,SAACC,GAChB,OACC,qBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,SAA/D,SACCJ,EAAMK,aCuEOC,E,kDAxDd,aAAc,IAAD,8BAEV,gBAoBHC,eAAgB,SAACC,GAGZ,EAAKC,SAAS,CAAC7B,YAAY4B,EAAME,OAAOC,SAnB1C,EAAKC,MAAO,CAGRlB,OAAO,GACPd,YAAY,IAVN,E,qDAed,WAAoB,IAAD,OAEnBiC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACf,OAASuB,S,oBASnE,WACI,MAA8BC,KAAKN,MAA5BlB,EAAP,EAAOA,OAAQd,EAAf,EAAeA,YAGbuC,EAAgBzB,EAAO0B,QAAO,SAAAC,GAChC,OAAQA,EAAMlC,KAAKmC,cAAcC,SAAS3C,EAAY0C,gBACtDD,EAAMhC,MAAMiC,cAAcC,SAAS3C,EAAY0C,kBAGnD,OAAiC,IAA7BJ,KAAKN,MAAMlB,OAAO8B,OACX,0CAGH,sBAAK1C,UAAW,KAAhB,UACA,oBAAIA,UAAW,KAAf,4BACA,cAAC,EAAD,CAAWD,aAAeqC,KAAKX,iBAG/B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUb,OAAQyB,a,GA/CZM,aCTHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eec65dad.chunk.js","sourcesContent":["import React from \"react\";\r\n//nB the Searchbox fxn takes props hence you need to unpack\r\n//with {} as shown below\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n    <div className= 'pa2'>\r\n        <input className= 'pa3 ba b--green bg-lightest-blue' \r\n        type = 'search'\r\n        placeholder = 'search robots' \r\n        onChange= {searchChange}\r\n        />\r\n    </div>\r\n   \r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n// this code will generate a card component that will be used in the \r\n// cardlisst component to generate multiple cards \r\n// you can import this to the index.js to see what a card looks like\r\n//ReactDom.render{<> <Card id= {} name= {} email= {}/> </> }\r\n\r\n// you can destructure within the parameters\r\nconst Card = ({name, id , email}) => {\r\n  // the actionn below is known as destructuring\r\n//  or const {name, id , email}= props;\r\n  return(\r\n    <a href={`https://robohash.org/${id}?size=100x100`}>\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow dim bw2 shadow-5'>\r\n     <img src={`https://robohash.org/${id}?size=100x100`} alt=\"robot\" />\r\n    \r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email} </p>\r\n    </div>\r\n    </div> </a>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n// this code is to generate an array of the multiple cards \r\n// needed in our app \r\n// you can import this to the index.js to see what a card looks like\r\n// impor Cardlist from ./Cardlist\r\n//ReactDom.render{<>  <Cardlist robots={robots} />}\r\n\r\nfunction Cardlist({ robots }) {\r\n    const Cardcomponents = robots.map((user, i) => {\r\n        return ( <\r\n            Card key = { robots[i].id }\r\n            id = { robots[i].id }\r\n            name = { user.name }\r\n            email = { user.email }\r\n            />\r\n        )\r\n    })\r\n    return ( <div> {\r\n            /* the sentence below is wrapped in curly brackets since it is \r\n                    javascript\r\n                    on can decide to use the robots.map() part without using Cardcomponents \r\n                    as shown below */\r\n        } { Cardcomponents } \r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nexport default Cardlist;","import React from \"react\";\r\n\r\n/* anything in the scroll tage are its children */\r\n\r\nconst Scroll = (props)=>{\r\nreturn(\r\n <div style={{overflow:\"scroll\",border:\"1px solid black\",height:\"500px\"}}>\r\n {props.children}\r\n </div>)\r\n   \r\n}\r\n\r\nexport default Scroll;","import React,{Component} from \"react\";\r\nimport SearchBox from './searchBox';\r\n/*import {robots} from './robots';  */\r\nimport Cardlist from './Cardlist';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\n\r\n//bfor using class component**** const App = ()=> {\r\n    // return(\r\n    //     <div className= 'tc'>\r\n    //     <h1>Robot friends</h1>\r\n    //     <SearchBox />\r\n    //     <Cardlist robots= {robots}/>\r\n    //     </div>\r\n        \r\n    // )\r\n// }\r\n\r\n//we need to use the component from react to use changing state in \r\n// react\r\nclass App extends Component {\r\n constructor(){\r\n//constructor should point to the super component constructor\r\n    super()\r\n//you should readup on states\r\n//states can be changed but props cant\r\n//states feed the values to the props\r\n    this.state= {\r\n        //the robots should be served by an api hence\r\n        // robots: robots --> is replaced by\r\n        robots:[],\r\n        searchfield:''\r\n    }\r\n}\r\n// when the component above mounts it should take a second to \r\n// load the code below\r\ncomponentDidMount(){\r\n    // we load robots from an API\r\nfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n.then(response=> response.json()).then(users=> this.setState({robots : users}))\r\n}\r\n// new fxn in this class is created like this\r\n//event.target.value used to acess user input\r\n onSearchChange= (event)=> {\r\n    //  this.setState changes a particular state of something to reflects \r\n    // on the input by user as shown blow\r\n      this.setState({searchfield:event.target.value});\r\n}\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        //upon getting input we need to filter the input inaccordance\r\n        // to the user input\r\n    const filteredRobots= robots.filter(robot=>{\r\n        return (robot.name.toLowerCase().includes(searchfield.toLowerCase())||\r\n        robot.email.toLowerCase().includes(searchfield.toLowerCase()))\r\n    })\r\n     \r\n    if (this.state.robots.length === 0){\r\n        return <h1> LOADING</h1>\r\n    }else{\r\n        return(\r\n            <div className= 'tc'>\r\n            <h1 className= 'f1'>Robots API app</h1>\r\n            <SearchBox searchChange= {this.onSearchChange}/>\r\n            {/* then we need to change the robots to filtered robots inorder\r\n            toonly display the matching result */}\r\n            <Scroll>\r\n            <Cardlist robots={filteredRobots} />\r\n            </Scroll>\r\n            </div>\r\n            \r\n        )  }   }\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n// lifecycle mthods\r\n// this are methods that come with react \r\n// ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}